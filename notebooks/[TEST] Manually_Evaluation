{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:1919: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\AppData\\Local\\ESRI\\conda\\envs\\working_clone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:2018: The name tf.image.resize_nearest_neighbor is deprecated. Please use tf.compat.v1.image.resize_nearest_neighbor instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:341: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:399: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:423: calling crop_and_resize_v1 (from tensorflow.python.ops.image_ops_impl) with box_ind is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "box_ind is deprecated, use box_indices instead\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:720: The name tf.sets.set_intersection is deprecated. Please use tf.sets.intersection instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:722: The name tf.sparse_tensor_to_dense is deprecated. Please use tf.sparse.to_dense instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\matterport\\model.py:772: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.cast` instead.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "import numpy as np\n",
    "ROOT_DIR = os.path.abspath(\"../\")\n",
    "os.chdir(ROOT_DIR)\n",
    "sys.path.append(ROOT_DIR)\n",
    "from utils import resources\n",
    "from model.model import Model\n",
    "from model.model import RoofTypeConfig\n",
    "from model.dataset import RoofTypeDataset\n",
    "\n",
    "import matterport.model as modellib\n",
    "from matterport import visualize\n",
    "from matterport.model import log\n",
    "from matterport import utils\n",
    "import random\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def get_ax(rows=1, cols=1, size=8):\n",
    "    \"\"\"Return a Matplotlib Axes array to be used in\n",
    "    all visualizations in the notebook. Provide a\n",
    "    central point to control graph sizes.\n",
    "    \n",
    "    Change the default size attribute to control the size\n",
    "    of rendered images\n",
    "    \"\"\"\n",
    "    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))\n",
    "    return ax\n",
    "\n",
    "dataset_test = RoofTypeDataset()\n",
    "dataset_test.load_data(r\"C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\resources\\images\\chips\\train_test_val\\test\")\n",
    "dataset_test.prepare()\n",
    "\n",
    "model = Model(mode=\"inference\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dist = {}\n",
    "for i in range(300):\n",
    "    original_image, image_meta, gt_class_id, gt_bbox, gt_mask = modellib.load_image_gt(dataset_test, RoofTypeConfig, \n",
    "                                                            i, use_mini_mask=False)\n",
    "    for id in gt_class_id:\n",
    "        cls = dataset_test.class_names[id]\n",
    "        if cls in dist:\n",
    "            dist[cls] += 1\n",
    "        else:\n",
    "            dist[cls] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def method():\n",
    "    dist = {}\n",
    "    files = []\n",
    "    ids = []\n",
    "    for i in range(len(dataset_test.image_ids)):\n",
    "        original_image, image_meta, gt_class_id, gt_bbox, gt_mask = modellib.load_image_gt(dataset_test, RoofTypeConfig, \n",
    "                                                                i, use_mini_mask=False)\n",
    "        if 5 in gt_class_id or 6 in gt_class_id:\n",
    "            files.append(dataset_test.image_info[i][\"path\"])\n",
    "            ids.append(i)\n",
    "            for id in gt_class_id:\n",
    "                cls = dataset_test.class_names[id]\n",
    "                if cls in dist:\n",
    "                    dist[cls] += 1\n",
    "                else:\n",
    "                    dist[cls] = 1\n",
    "            if \"3400\" in dist and \"3300\" in dist:\n",
    "                if dist[\"3400\"] >= 100 and dist[\"3300\"] >= 100:\n",
    "                    return files, dist, ids\n",
    "    return files, dist, ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "files, dist, ids = method()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "cnt = -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cnt += 1\n",
    "image_id = ids[cnt]\n",
    "print(image_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_iou(boxA, boxB):\n",
    "    xA = max(boxA.xmin, boxB.xmin)\n",
    "    yA = max(boxA.ymin, boxB.ymin)\n",
    "    xB = min(boxA.xmax, boxB.xmax)\n",
    "    yB = min(boxA.ymax, boxB.ymax)\n",
    "    interArea = max(0, xB-xA+1)*max(0, yB-yA+1)\n",
    "    boxAArea = (boxA.xmax-boxA.xmin+1)*(boxA.ymax-boxA.ymin+1)\n",
    "    boxBArea = (boxB.xmax-boxB.xmin+1)*(boxB.ymax-boxB.ymin+1)\n",
    "    iou = interArea/float(boxAArea+boxBArea-interArea)\n",
    "    return iou\n",
    "\n",
    "class BBOX:\n",
    "    def __init__(self, bbox, class_id):\n",
    "        self.xmin = bbox[1]\n",
    "        self.ymin = bbox[0]\n",
    "        self.xmax = bbox[3]\n",
    "        self.ymax = bbox[2]\n",
    "        self.class_id = class_id\n",
    "        self.detected = False\n",
    "\n",
    "def calc_matrix(gt_bboxes, gt_class_ids, dt_bboxes, dt_class_ids):\n",
    "    result = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[]}\n",
    "    gt_BBOXES = []\n",
    "    for i in range(len(gt_bboxes)):\n",
    "        gt_BBOXES.append(BBOX(gt_bboxes[i], gt_class_ids[i]))\n",
    "    dt_BBOXES = []\n",
    "    for i in range(len(dt_bboxes)):\n",
    "        dt_BBOXES.append(BBOX(dt_bboxes[i], dt_class_ids[i]))\n",
    "    if len(dt_bboxes) == 0:\n",
    "        print(\"No Matches\")\n",
    "        return result\n",
    "    for dt_bbox in dt_BBOXES:\n",
    "        high_iou = [-1, None]\n",
    "        for gt_bbox in gt_BBOXES:\n",
    "            iou = calculate_iou(dt_bbox, gt_bbox)\n",
    "            if iou > high_iou[0]:\n",
    "                high_iou[0] = iou\n",
    "                high_iou[1] = gt_bbox\n",
    "        if high_iou[0] >= 0.5:\n",
    "            if high_iou[1].class_id == dt_bbox.class_id and high_iou[1].detected == False:\n",
    "                result[dt_bbox.class_id].append(\"TP\")\n",
    "                high_iou[1].detected = True\n",
    "            elif high_iou[1].class_id == dt_bbox.class_id and high_iou[1].detected == True:\n",
    "                result[dt_bbox.class_id].append(\"FP\")\n",
    "            else:\n",
    "                result[dt_bbox.class_id].append(\"FN\")\n",
    "        else:\n",
    "            result[dt_bbox.class_id].append(\"FP\")\n",
    "    for gt_bbox in gt_BBOXES:\n",
    "        if gt_bbox.detected == False:\n",
    "            result[gt_bbox.class_id].append(\"FN\")\n",
    "    return result\n",
    "\n",
    "def calc_recall_precision(matrix, total_to_detect):\n",
    "    precision = []\n",
    "    recall = []\n",
    "    TP_CNT = 0\n",
    "    for i in range(len(matrix)):\n",
    "        element = matrix[i]\n",
    "        if element == \"TP\":\n",
    "            TP_CNT+=1\n",
    "        recall.append(TP_CNT/total_to_detect)\n",
    "        precision.append(TP_CNT/(i+1))\n",
    "    return (recall, precision)\n",
    "\n",
    "def merge_results(res_one, res_two):\n",
    "    res_one[1] = res_one[1] + res_two[1]\n",
    "    res_one[2] = res_one[2] + res_two[2]\n",
    "    res_one[3] = res_one[3] + res_two[3]\n",
    "    res_one[4] = res_one[4] + res_two[4]\n",
    "    res_one[5] = res_one[5] + res_two[5]\n",
    "    res_one[6] = res_one[6] + res_two[6]\n",
    "    return res_one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_prediction():\n",
    "    result = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[]}\n",
    "    totals = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0}\n",
    "    for image_id in ids:\n",
    "        original_image, image_meta, gt_class_id, gt_bbox, gt_mask = modellib.load_image_gt(dataset_test, model.config, \n",
    "                                                                image_id, use_mini_mask=False)\n",
    "        path, file = os.path.split(dataset_test.image_info[image_id]['path'])\n",
    "        name, ext = os.path.splitext(file)\n",
    "        img = os.path.join(path, \"{}_bak.tif\".format(name))\n",
    "        model_path = r\"C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\resources\\logs2\\roof_types20201009T1115\\mask_rcnn_roof_types_0250.h5\"\n",
    "        results = model.detect(model_path, [img])\n",
    "        r = results[0][0]\n",
    "        matrix = calc_matrix(gt_bbox, gt_class_id, r[\"rois\"], r[\"class_ids\"])\n",
    "        result = merge_results(result, matrix)\n",
    "        for class_id in gt_class_id:\n",
    "            totals[class_id] += 1\n",
    "    return result, totals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "No Matches\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  254.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  224.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n",
      "Re-starting from epoch 250\n",
      "Processing 1 images\n",
      "image                    shape: (512, 512, 3)         min:    0.00000  max:  255.00000  uint8\n",
      "molded_images            shape: (1, 512, 512, 3)      min: -127.58000  max:  223.60000  float64\n",
      "image_metas              shape: (1, 19)               min:    0.00000  max:  512.00000  int32\n",
      "anchors                  shape: (1, 109200, 4)        min:   -0.54233  max:    1.29184  float32\n"
     ]
    }
   ],
   "source": [
    "result, totals = run_prediction()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: ['FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  ...],\n",
       " 2: ['FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN'],\n",
       " 3: ['FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  ...],\n",
       " 4: ['FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN'],\n",
       " 5: ['FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN'],\n",
       " 6: ['FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'TP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FP',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN',\n",
       "  'FN']}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 1091, 2: 255, 3: 1281, 4: 217, 5: 291, 6: 100}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "totals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = calc_matrix(gt_bbox, gt_class_id, r[\"rois\"], r[\"class_ids\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rec_pre = calc_recall_precision(res[4], len(gt_class_id))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rec_pre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gt_bboxes = [BBOX(gt_bbx) for gt_bbx in gt_bbox]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gt = BBOX(gt_bbox[0])\n",
    "dt = BBOX(r[\"rois\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "box = BBOX(gt_bbox[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gt_bbox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r[\"class_ids\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "original_image, image_meta, gt_class_id, gt_bbox, gt_mask = modellib.load_image_gt(dataset_test, model.config, \n",
    "                                                            image_id, use_mini_mask=False)\n",
    "visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id, \n",
    "                            dataset_test.class_names, figsize=(8, 8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path, file = os.path.split(dataset_test.image_info[image_id]['path'])\n",
    "name, ext = os.path.splitext(file)\n",
    "img = os.path.join(path, \"{}_bak.tif\".format(name))\n",
    "model_path = r\"C:\\Users\\MoritzWollenhaupt\\Desktop\\Masterarbeit\\resources\\logs2\\roof_types20201009T1115\\mask_rcnn_roof_types_0250.h5\"\n",
    "results = model.detect(model_path, [img])\n",
    "\n",
    "r = results[0][0]\n",
    "visualize.display_instances(original_image, r['rois'], r['masks'], r['class_ids'], \n",
    "                            dataset_test.class_names, r['scores'], ax=get_ax())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"{:5s}, {:5s}, {:5s}, {:5s}, {:5s}, {:5s}\".format(\"ID\", \"Class\", \"UL-X\", \"UL-Y\", \"LR-X\", \"LR-Y\"))\n",
    "for i in range(len(gt_class_id)):\n",
    "    print(\"{:5d}, {:5s}, {:5d}, {:5d}, {:5d}, {:5d}\".format(image_id, dataset_test.class_names[gt_class_id[i]], gt_bbox[i][1], gt_bbox[i][0], gt_bbox[i][3], gt_bbox[i][2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"{:5s}, {:5s}, {:5s}, {:5s}, {:5s}, {:5s}\".format(\"Class\", \"Score\", \"UL-X\", \"UL-Y\", \"LR-X\", \"LR-Y\"))\n",
    "for i in range(len(r[\"class_ids\"])):\n",
    "    print(\"{:5s}, {:1.3}, {:5d}, {:5d}, {:5d}, {:5d}\".format(dataset_test.class_names[r[\"class_ids\"][i]],r[\"scores\"][i],r[\"rois\"][i][1],r[\"rois\"][i][0],r[\"rois\"][i][3],r[\"rois\"][i][2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
